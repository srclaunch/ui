// import {
//   closeHoverPanel,
//   RootState,
//   useDispatch,
//   useSelector,
//   showModal,
// } from '@srclaunch/web-application-state';
// import MoreMenu from '../common/MoreMenu';
// import { push } from 'connected-react-router';
// import EntityPanel from '../entities/EntityPanel';
// import EntityEditor from '../entities/EntityEditor';
// import React from 'react';
// import { useSwipeable } from 'rea sct-swipeable';
// import styled from 'styled-components';

// import CloseButton from '../common/CloseButton';
// import { Panel, Title } from '..';
// import { Align, Orientation, Depth, Amount } from '@srclaunch/types';
// import { Icons } from '@srclaunch/icons';

// const SlidePanel: React.FC<{
// children?: React.ReactChild | React.ReactChildren | React.ReactNode;
// }> = ({}) => {
// const dispatch = useDispatch();

// const { id, entity, visible } = useSelector(
//   (state: RootState) => state.hoverPanel,
// );
// const path = useSelector(state => state.router.location.pathname).split(
//   '/',
// )[1];

// console.log('visible', visible);
// console.log('entity', entity);
// console.log('id', id);
// const contentRef = useRef<HTMLDivElement | null>(null);
// const [shadowScrollDifference, setShadowScrollDifference] = useState(0);
// const swipeConfig = {
//   delta: 100,
//   onSwipedDown: (swipeData) => {
//     dispatch(closeDetailsPanel());
//   },
// };

// const handlers = useSwipeable({
//   onSwiped: (eventData) => {},
//   ...swipeConfig,
// });

// useEffect(() => {
//   const scrollHeight = contentRef.current?.scrollHeight;
//   const viewPortHeight = contentRef.current?.offsetHeight;
//   const currentScrollPosition = 0;

//   if (scrollHeight && viewPortHeight) {
//     const heightDifference = scrollHeight - (viewPortHeight + currentScrollPosition);

//     setShadowScrollDifference(heightDifference);
//   }
// }, [visible]);

// return (
// <Container
// className="slide-panel"
// visible={visible}
// {...handlers}
// >

// <>
//   <Panel
//         orientation={Orientation.Horizontal}

//         padding={Amount.More}
//         flat={true}
//       >
//   <Title>{id ? `Edit ${entity.name}` : `New ${entity.name}`}</Title>

//         <MoreMenu
//           alignItems={Align.Right}
//           items={[
//             entity && id
//               ? {
//                   label: 'Edit',
//                   onClick: () => dispatch(push(`/${path}/${id}/edit`)),
//                 }
//               : {
//                   label: 'Details',
//                   onClick: () => dispatch(push(`/${path}/${id}`)),
//                 },
//             {
//               label: 'Delete',
//               icon: Icons.TrashCan,
//               color: 'rgba(237, 81, 66, 1)',
//               onClick: () => showModal(true),
//             },
//           ]}
//         />

//         <Panel width={42} alignItems={Align.Right}>
//           <CloseButton
//             onClick={() => dispatch && dispatch(closeHoverPanel())}
//           />
//         </Panel>
//       </Panel>

{
  /* <Content
            as={Panel}
            padding={Amount.More} 
            // ref={contentRef}
            // onScroll={(e) => {
            //   const scrollHeight = contentRef.current?.scrollHeight;
            //   const viewPortHeight = contentRef.current?.offsetHeight;
            //   const currentScrollPosition = contentRef.current?.scrollTop;

            //   if (scrollHeight && viewPortHeight && currentScrollPosition) {
            //     const heightDifference = scrollHeight - (viewPortHeight + currentScrollPosition);

            //     setShadowScrollDifference(heightDifference);
            //   }
            // }}
          >
            {/* <EntityPanel entity={entity} id={id} path={path} />

            {children} */
}

{
  /* 
      <ScrollShadow scrollDifference={shadowScrollDifference} />
     */
}
{
  /* </Content> */
}
//     </>
//   );
// };

// const Container = styled.div<{
//   visible?: boolean;
// }>`
//   background: var(--bg-color-depth-highest);
//   bottom: 0;
//   box-shadow: 0 0 60px rgba(0, 0, 0, 0.2);
//   border-radius: 15px 15px 0 0;
//   left: 0;
//   opacity: ${props => (props.visible ? '1' : '0')};
//   overflow: hidden;
//   position: fixed;
//   right: 0;
//   top: 15%;
// transform: ${props =>
//   props.visible ? 'translate(0, 0)' : 'translate(0, 1900px)'};
// transition: transform 0.4s ease-in-out, opacity 0.2s ease-in-out;
//   z-index: 7000;

//   @media (min-width: 992px) {
//     border-radius: 15px;
//     bottom: 13px;
//     left: initial;
//     transform: ${props =>
//       props.visible ? 'translate(0, 0)' : 'translate(1600px, 0)'};
//     right: 13px;
//     top: 13px;
//     width: 400px;
//   }
// `;

// const Content = styled.div`
//   overflow: hidden;
//   overflow-y: scroll;
// `;

// const ScrollShadow = styled.div<{
//   scrollDifference: number;
// }>`
//   background: transparent;
//   border-radius: 15px;
//   bottom: 0;
//   height: 300px;
//   overflow: hidden;
//   pointer-events: none;
//   position: fixed;
//   right: 0;
//   width: 100%;

//   &:after {
//     box-shadow: inset 0 -50px 50px rgba(0, 0, 0, 0.2);
//     content: '';
//     display: block;
//     height: 300px;
//     left: -50px;
//     position: absolute;
//     transition: all 0.2s ease-in;
//     width: 200%;

//     ${props =>
//       props.scrollDifference > 50 &&
//       css`
//         box-shadow: inset 0 -50px 50px rgba(0, 0, 0, 0.15);
//       `};

//     ${props =>
//       props.scrollDifference <= 50 &&
//       css`
//         box-shadow: inset 0 -50px 50px rgba(0, 0, 0, 0.15);
//         opacity: ${props =>
//           // @ts-ignore
//           (props.scrollDifference <= 15 ? 0 : 20 / props.scrollDifference)};
//       `};
//   }

//   /* @media (min-width: 992px) {
//     width: 400px;
//   } */
// `;

// export default SlidePanel;
