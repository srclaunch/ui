import {
  CurrencyCode
} from "./chunk-AX2K4G44.js";
import {
  define_global_default,
  init_define_global
} from "./chunk-5IGOSQWA.js";

// dep:@srclaunch_i18n
init_define_global();

// node_modules/@srclaunch/i18n/lib/index.js
init_define_global();

// node_modules/@srclaunch/i18n/lib/currency/index.js
init_define_global();
function getDigitsFromValue(value = "") {
  return value.replace(/(-(?!\d))|[^0-9|-]/g, "") || "";
}
function padDigits(digits) {
  const desiredLength = 3;
  const actualLength = digits.length;
  if (actualLength >= desiredLength) {
    return Number.parseFloat(digits);
  }
  const amountToAdd = desiredLength - actualLength;
  const padding = "0".repeat(amountToAdd);
  return Number.parseFloat(padding + digits);
}
function removeLeadingZeros(number) {
  const strFromNum = number.toString();
  return strFromNum.replace(/^0+([0-9]+)/, "$1");
}
function addDecimalToNumber(number, separator) {
  const strFromNum = number.toString();
  const centsStartingPosition = strFromNum.length - 2;
  const dollars = removeLeadingZeros(strFromNum.substring(0, centsStartingPosition));
  const cents = strFromNum.substring(centsStartingPosition);
  return dollars + separator + cents;
}
function toCurrency(value, separator = ".") {
  const strFromNum = value.toString();
  const digits = getDigitsFromValue(strFromNum.toString());
  const digitsWithPadding = padDigits(digits);
  return addDecimalToNumber(digitsWithPadding, separator);
}
function formatCurrency({ amount, currency }) {
  switch (currency) {
    case CurrencyCode.UnitedStatesDollar:
      return `$${amount.toFixed(amount % 1 !== 0 ? 2 : 0).replace(/\B(?=(\d{3})+(?!\d))/g, ",")}`;
    default:
      return `$${amount.toFixed(amount % 1 !== 0 ? 2 : 0).replace(/\B(?=(\d{3})+(?!\d))/g, ",")}`;
  }
}

// node_modules/@srclaunch/i18n/lib/locale/index.js
init_define_global();
function getLocale() {
  let locale;
  if (define_global_default.chrome && define_global_default.chrome.runtime && typeof define_global_default.chrome.runtime.getManifest === "function") {
    locale = define_global_default.chrome.runtime.getManifest();
    if (locale && locale.current_locale) {
      return locale.current_locale;
    }
  }
  locale = define_global_default.navigator && (define_global_default.navigator.languages && define_global_default.navigator.languages[0] || define_global_default.navigator.language || define_global_default.navigator.userLanguage);
  if (!locale && define_global_default.navigator && define_global_default.navigator.userAgent) {
    locale = define_global_default.navigator.userAgent.match(/;.(\w+-\w+)/);
    if (locale)
      return locale[1];
  }
  if (!locale) {
    locale = (define_global_default.clientInformation || /* @__PURE__ */ Object.create(null)).language;
  }
  if (!locale) {
    if (define_global_default.Intl && typeof define_global_default.Intl.DateTimeFormat === "function") {
      locale = define_global_default.Intl.DateTimeFormat().resolvedOptions && define_global_default.Intl.DateTimeFormat().resolvedOptions().locale;
    }
    if (!locale && ["LANG", "LANGUAGE"].some(Object.hasOwnProperty, process.env)) {
      return (process.env.LANG || process.env.LANGUAGE || String()).replace(/[.:].*/, "").replace("_", "-");
    }
  }
  return locale;
}
function formatLocale(langLocale) {
  return langLocale.split("-").slice(0, 2).map((chunk, index) => {
    if (index !== 0 && chunk.length === 2)
      return chunk.toUpperCase();
    return chunk;
  }).join("-");
}
function getFormattedLocale() {
  return formatLocale(getLocale());
}
export {
  addDecimalToNumber,
  formatCurrency,
  formatLocale,
  getDigitsFromValue,
  getFormattedLocale,
  getLocale,
  padDigits,
  removeLeadingZeros,
  toCurrency
};
//# sourceMappingURL=@srclaunch_i18n.js.map
